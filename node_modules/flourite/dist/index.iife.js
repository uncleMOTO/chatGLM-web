var flourite=function(){"use strict";const t=[{pattern:new RegExp(`^(${["ADD","ARG","AS","CMD","COPY","CROSS_BUILD","ENTRYPOINT","ENV","EXPOSE","FROM","HEALTHCHECK","LABEL","MAINTAINER","ONBUILD","RUN","SHELL","STOPSIGNAL","USER","VOLUME","WORKDIR"].join("|")})`),type:"keyword"}];function e(t,e){return e.map((e=>e.pattern.test(t)?function(t){switch(t){case"keyword.print":case"meta.import":case"meta.module":return 5;case"keyword.function":case"constant.null":return 4;case"constant.type":case"constant.string":case"constant.numeric":case"constant.boolean":case"constant.dictionary":case"constant.array":case"keyword.variable":return 3;case"section.scope":case"keyword.other":case"keyword.operator":case"keyword.control":case"keyword.visibility":case"keyword":return 2;case"comment.block":case"comment.line":case"comment.documentation":case"macro":return 1;case"not":default:return-20}}(e.type):0)).reduce(((t,e)=>t+e),0)}function n(t,e){return e.length<=10||t<e.length/10}function r(t){return"C++"===t?"cpp":"C#"===t?"csharp":t.toLowerCase()}const p={node:"Javascript",jsc:"Javascript",rhino:"Javascript",deno:"Typescript",python3:"Python",python2:"Python",php:"PHP"},o={C:[{pattern:/(char|long|int|float|double)\s+\w+\s*=?/,type:"constant.type"},{pattern:/malloc\(.+\)/,type:"keyword.function"},{pattern:/#include (<|")\w+\.h(>|")/,type:"meta.import",nearTop:!0},{pattern:/(\w+)\s*\*\s*\w+/,type:"keyword"},{pattern:/(\w+)\s+\w+(;|\s*=)/,type:"macro"},{pattern:/(\w+)\s+\w+\[.+\]/,type:"keyword.other"},{pattern:/#define\s+.+/,type:"macro"},{pattern:/NULL/,type:"constant.null"},{pattern:/void/g,type:"keyword.other"},{pattern:/(printf|puts)\s*\(.+\)/,type:"keyword.print"},{pattern:/new \w+/,type:"not"},{pattern:/new [A-Z]\w*\s*\(.+\)/,type:"not"},{pattern:/'.{2,}'/,type:"not"},{pattern:/var\s+\w+\s*=?/,type:"not"},{pattern:/def\s+\w+\s*(\(.+\))?\s*\n/,type:"not"},{pattern:/puts\s+("|').+("|')/,type:"not"},{pattern:/Console\.(WriteLine|Write)(\s*)?\(/,type:"not"},{pattern:/(using\s)?System(\..*)?(;)?/,type:"not"},{pattern:/(public\s)?((partial|static|delegate)\s)?(class\s)/,type:"not"},{pattern:/(public|private|protected|internal)/,type:"not"},{pattern:/(new|this\s)?(List|IEnumerable)<(sbyte|byte|short|ushort|int|uint|long|ulong|float|double|decimal|bool|char|string)>/,type:"not"},{pattern:/local\s(function|\w+)?/,type:"not"},{pattern:/^(void\s)?main\(\)\s(async\s)?{/,type:"not"}],Clojure:[{pattern:/^(\s+)?\(ns(\s+)(.*)(\))?$/,type:"meta.module"},{pattern:/^(\s+)?\(print(ln)?(\s+)(.*)(\))$/,type:"keyword.print"},{pattern:/^(\s+)?\((de)?fn(-)?(\s+)(.*)(\))?$/,type:"keyword.function"},{pattern:/^(\s+)?\((let|def)(\s+)(.*)(\))?$/,type:"keyword.variable"},{pattern:/^(\s+)?\((class|coll\?|seq\?|range|cons|conj|concat|map|filter|reduce)(\s+)(.*)(\))?$/,type:"keyword"},{pattern:/^(\s+)?\((as)?->(>)?/,type:"macro"},{pattern:/^(\s+)?\((use|require|import|:import)(\s+)(.*)(\))?$/,type:"meta.module"},{pattern:/^(\s+)?\((do|if|loop|cond|when|or|and|condp|case)/,type:"keyword.control"}],"C++":[{pattern:/(char|long|int|float|double)\s+\w+\s*=?/,type:"constant.type"},{pattern:/#include\s*(<|")\w+(\.h)?(>|")/,type:"meta.import"},{pattern:/using\s+namespace\s+.+\s*;/,type:"keyword"},{pattern:/template\s*<.*>/,type:"keyword"},{pattern:/std::\w+/g,type:"keyword.other"},{pattern:/(cout|cin|endl)/g,type:"keyword.print"},{pattern:/(public|protected|private):/,type:"keyword.visibility"},{pattern:/nullptr/,type:"keyword"},{pattern:/new \w+(\(.*\))?/,type:"keyword"},{pattern:/#define\s+.+/,type:"macro"},{pattern:/\w+<\w+>/,type:"keyword.other"},{pattern:/class\s+\w+/,type:"keyword"},{pattern:/void/g,type:"keyword"},{pattern:/(else )?if\s*\(.+\)/,type:"keyword.control"},{pattern:/while\s+\(.+\)/,type:"keyword.control"},{pattern:/\w*::\w+/,type:"macro"},{pattern:/'.{2,}'/,type:"not"},{pattern:/(List<\w+>|ArrayList<\w*>\s*\(.*\))(\s+[\w]+|;)/,type:"not"},{pattern:/def\s+\w+\s*(\(.+\))?\s*\n/,type:"not"},{pattern:/puts\s+("|').+("|')/,type:"not"},{pattern:/\bmodule\s\S/,type:"not"},{pattern:/Console\.(WriteLine|Write)(\s*)?\(/,type:"not"},{pattern:/(using\s)?System(\..*)?(;)?/,type:"not"},{pattern:/static\s+\S+\s+Main\(.*\)/,type:"not"},{pattern:/(public|private|protected|internal)\s/,type:"not"},{pattern:/fun main\((.*)?\) {/,type:"not"},{pattern:/(inline|private|public|protected|override|operator(\s+))?fun(\s+)([A-Za-z0-9_])(\s+)?\((.*)\)(\s+)({|=)/,type:"not"},{pattern:/(const)?(\s+)?val(\s+)(.*)(:(\s)(.*)(\?)?)?(\s+)=(\s+)/,type:"not"},{pattern:/^(void\s)?main\(\)\s(async\s)?{/,type:"not"}],"C#":[{pattern:/using\sSystem(\..*)?(;)?/,type:"meta.import"},{pattern:/Console\.(WriteLine|Write)(\s*)?\(/,type:"keyword.print"},{pattern:/Console\.ReadLine\(\)/,type:"keyword.other"},{pattern:/(public\s)?((partial|static|delegate)\s)?class\s/,type:"keyword"},{pattern:/(extern|override|sealed|readonly|virtual|volatile)/,type:"keyword.other"},{pattern:/namespace\s(.*)(\.(.*))?(\s{)?/,type:"keyword"},{pattern:/(#region(\s.*)?|#endregion\n)/,type:"section.scope"},{pattern:/(public|private|protected|internal)\s/,type:"keyword.visibility"},{pattern:/\bclass\s+\w+/,type:"keyword"},{pattern:/(else )?if\s*\(.+\)/,type:"keyword.control"},{pattern:/\bwhile\s+\(.+\)/,type:"keyword.control"},{pattern:/(const\s)?(sbyte|byte|short|ushort|int|uint|long|ulong|float|double|decimal|bool|char|string)(\[\])?\s(.*)\s=\s(.*);/,type:"constant.type"},{pattern:/(new|this\s)?(List|IEnumerable)<(sbyte|byte|short|ushort|int|uint|long|ulong|float|double|decimal|bool|char|string)>/,type:"constant.dictionary"},{pattern:/#define\s(.*)/,type:"macro"},{pattern:/\s([A-Z]([A-Z0-9]*[a-z][a-z0-9]*[A-Z]|[a-z0-9]*[A-Z][A-Z0-9]*[a-z])[A-Za-z0-9]*)\s=/,type:"macro"},{pattern:/(extends|throws|@Attribute)/,type:"not"},{pattern:/System\.(in|out)\.\w+/,type:"not"},{pattern:/\bmodule\s\S/,type:"not"},{pattern:/^\s*import\s("|')dart:\w+("|')/,type:"not"}],CSS:[{pattern:/[a-z-]+:(?!:).+;/,type:"keyword"},{pattern:/<(\/)?style>/,type:"not"}],Dart:[{pattern:/^\s*(const|final|var|dynamic|late)?\s*(int|double|String|bool|List<[A-Za-z [\](),]+>|HashMap<[A-Za-z [\](),]+>|Iterator<[A-Za-z [\](),]+>|Set<[A-Za-z [\](),]+>)?(\?)?\s\w+(\s=\s.+)?(;|,)$/,type:"keyword.variable"},{pattern:/\bstdout.write\(.+\);/,type:"keyword.print"},{pattern:/\bprint\(.+\);/,type:"keyword.print"},{pattern:/^\s*import\s("|')dart:\w+("|')/,type:"meta.import",nearTop:!0},{pattern:/^\s*import\s("|')package:\w+("|')/,type:"meta.import",nearTop:!0},{pattern:/^\s*library\s\w+;/,type:"meta.module",nearTop:!0},{pattern:/^\s*(void\s)?main\(\)\s(async\s)?{/,type:"keyword.function"},{pattern:/^\s*(List<[A-Za-z [\](),]+>|HashMap<[A-Za-z [\](),]+>|int|double|String|bool|void|Iterator<[A-Za-z [\](),]+>|Set<[A-Za-z [\](),]+>)\s\w+\(.+\)\s*\{$/,type:"keyword.function"},{pattern:/^\s*(int|double|String|bool|List<[A-Za-z [\](),]+>|HashMap<[A-Za-z [\](),]+>|Iterator<[A-Za-z [\](),]+>|Set<[A-Za-z [\](),]+>)\s\w+\(.+\)\s=>/,type:"keyword.function"},{pattern:/\bnew\s(List|Map|Iterator|HashMap|Set)<\w+>\(\);$/,type:"keyword.variable"},{pattern:/^(abstract\s)?class\s\w+\s(extends\s\w+\s)?(with\s\w+\s)?(implements\s\w+\s)?{(})?$/,type:"keyword.control"},{pattern:/\bget\s\w+=>\w+/,type:"keyword.control"},{pattern:/^\s*@override$/,type:"keyword.control"},{pattern:/\bset\s\w+\(.+\)/,type:"keyword.control"},{pattern:/^\s*Future<w+>\s\w+\(.+\)\sasync/,type:"keyword.control"},{pattern:/^\s*await\sfor/,type:"keyword.control"},{pattern:/^\s*typedef\s.+\s=/,type:"keyword.control"},{pattern:/\blong\s/,type:"not"},{pattern:/\s*function\b/,type:"not"},{pattern:/\bArrayList/,type:"not"}],Dockerfile:t,Elixir:[{pattern:/^\s*defmodule\s+.+\s+do$/,type:"meta.module"},{pattern:/\s*alias\s+.+as:.+/,type:"keyword.other"},{pattern:/IO\.puts.+/,type:"keyword.print"},{pattern:/fn\s+[A-Za-z0-9_:<>()]+\s+->\s+.+(end)?$/,type:"keyword.function"},{pattern:/^\s*(def|defp)\s+.+\s+do$/,type:"keyword.function"},{pattern:/^\s*(if|unless|cond|case|try|defimpl|defprotocol)\s+.+\s+do$/,type:"keyword.control"},{pattern:/^\s*defstruct\s+/,type:"keyword"},{pattern:/^\s*@spec\s+.+::.+/,type:"macro"},{pattern:/\{:.+,.+\}/,type:"constant.array"},{pattern:/%\{(.+(=>|:).+(,)?){1,}\}/,type:"constant.dictionary"}],Go:[{pattern:/package\s+[a-z]+\n/,type:"meta.module",nearTop:!0},{pattern:/(import\s*\(\s*\n)|(import\s+"[a-z0-9/.]+")/,type:"meta.import",nearTop:!0},{pattern:/if.+err\s*!=\s*nil.+{/,type:"keyword.function"},{pattern:/fmt\.Print(f|ln)?\(.*\)/,type:"keyword.print"},{pattern:/func(\s+\w+\s*)?\(.*\).*{/,type:"keyword.function"},{pattern:/\w+\s*:=\s*.+[^;\n]/,type:"keyword.variable"},{pattern:/(}\s*else\s*)?if[^()]+{/,type:"keyword.control"},{pattern:/(var|const)\s+\w+\s+[\w*]+(\n|\s*=|$)/,type:"keyword.variable"},{pattern:/[a-z]+\.[A-Z]\w*/,type:"macro"},{pattern:/nil/,type:"keyword"},{pattern:/'.{2,}'/,type:"not"},{pattern:/Console\.(WriteLine|Write)(\s*)?\(/,type:"not"},{pattern:/using\sSystem(\..*)?(;)?/,type:"not"},{pattern:/(public|private|protected|internal)\s/,type:"not"}],HTML:[{pattern:/<!DOCTYPE (html|HTML PUBLIC .+)>/,type:"meta.module",nearTop:!0},{pattern:/<[a-z0-9]+(\s*[\w]+=('|").+('|")\s*)?>.*<\/[a-z0-9]+>/g,type:"keyword"},{pattern:/<!--(.*)(-->)?/,type:"comment.block"},{pattern:/[a-z-]+=("|').+("|')/g,type:"keyword.other"},{pattern:/<\?php/,type:"not"}],Java:[{pattern:/System\.(in|out)\.\w+/,type:"keyword.print"},{pattern:/(private|protected|public)\s*\w+\s*\w+(\s*=\s*[\w])?/,type:"keyword"},{pattern:/(private|protected|public)\s*\w+\s*[\w]+\(.+\)/,type:"keyword"},{pattern:/(^|\s)(String)\s+[\w]+\s*=?/,type:"keyword.other"},{pattern:/(List<\w+>|ArrayList<\w*>\s*\(.*\))(\s+[\w]+|;)/,type:"keyword.variable"},{pattern:/(public\s*)?class\b.*?\{/,type:"keyword"},{pattern:/(\w+)(\[\s*\])+\s+\w+/,type:"constant.array"},{pattern:/final\s*\w+/,type:"keyword.other"},{pattern:/\w+\.(get|set)\(.+\)/,type:"keyword.other"},{pattern:/new [A-Z]\w*\s*\(.+\)/,type:"keyword.other"},{pattern:/(^|\s)(char|long|int|float|double)\s+[\w]+\s*=?/,type:"constant.type"},{pattern:/(extends|implements)/,type:"meta.module",nearTop:!0},{pattern:/null/g,type:"keyword.other"},{pattern:/(else )?if\s*\(.+\)/,type:"keyword.control"},{pattern:/while\s+\(.+\)/,type:"keyword.control"},{pattern:/void/,type:"keyword.other"},{pattern:/const\s*\w+/,type:"not"},{pattern:/(\w+)\s*\*\s*\w+/,type:"not"},{pattern:/'.{2,}'/,type:"not"},{pattern:/#include\s*(<|")\w+(\.h)?(>|")/,type:"not",nearTop:!0},{pattern:/def\s+\w+\s*(\(.+\))?\s*\n/,type:"not"},{pattern:/\bnamespace\s.*(\s{)?/,type:"not"},{pattern:/\[Attribute\]/,type:"not"},{pattern:/Console\.(WriteLine|Write)(\s*)?\(/,type:"not"},{pattern:/(#region(\s.*)?|#endregion\n)/,type:"not"},{pattern:/using\sSystem(\..*)?(;)?/,type:"not"},{pattern:/fun main\((.*)?\) {/,type:"not"},{pattern:/(inline(\s+))?fun(\s+)([A-Za-z0-9_])(\s+)?\((.*)\)(\s+)({|=)/,type:"not"},{pattern:/(const)?(\s+)?val(\s+)(.*)(:(\s)(.*)(\?)?)?(\s+)=(\s+)/,type:"not"},{pattern:/^(void\s)?main\(\)\s{/,type:"not"}],Javascript:[{pattern:/undefined/g,type:"keyword"},{pattern:/window\./g,type:"keyword"},{pattern:/console\.log\s*\(/,type:"keyword.print"},{pattern:/(var|const|let)\s+\w+\s*=?/,type:"keyword.variable"},{pattern:/(('|").+('|")\s*|\w+):\s*[{[]/,type:"constant.array"},{pattern:/===/g,type:"keyword.operator"},{pattern:/!==/g,type:"keyword.operator"},{pattern:/function\*?\s*([A-Za-z$_][\w$]*)?\s*[(][^:;()]*[)]\s*{/g,type:"keyword.function"},{pattern:/\(* => {/g,type:"keyword.function"},{pattern:/null/g,type:"constant.null"},{pattern:/\(.*\)\s*=>\s*.+/,type:"keyword.control"},{pattern:/(else )?if\s+\(.+\)/,type:"keyword.control"},{pattern:/while\s+\(.+\)/,type:"keyword.control"},{pattern:/(^|\s)(char|long|int|float|double)\s+\w+\s*=?/,type:"not"},{pattern:/\*\w+/,type:"not"},{pattern:/<(\/)?script( type=('|")text\/javascript('|"))?>/,type:"not"},{pattern:/fn\s[A-Za-z0-9<>,]+\(.*\)\s->\s\w+(\s\{|)/,type:"not"},{pattern:/Console\.(WriteLine|Write)(\s*)?\(/,type:"not"},{pattern:/(using\s)?System(\..*)?(;)?/,type:"not"},{pattern:/(func|fn)\s/,type:"not"},{pattern:/(begin|end)\n/,type:"not"},{pattern:/local\s(function|(\w+)\s=)/,type:"not"},{pattern:/fun main\((.*)?\) {/,type:"not"},{pattern:/(inline(\s+))?fun(\s+)([A-Za-z0-9_])(\s+)?\((.*)\)(\s+)({|=)/,type:"not"},{pattern:/(const)?(\s+)?val(\s+)(.*)(:(\s)(.*)(\?)?)?(\s+)=(\s+)/,type:"not"},{pattern:/^(void\s)?main()\s{/,type:"not"}],Julia:[{pattern:/(using)\s\w+/,type:"meta.import"},{pattern:/(bare\s)?module/,type:"meta.module"},{pattern:/from\s.+import\s.+/,type:"not"},{pattern:/println\(.*\)/,type:"keyword.print"},{pattern:/(.*)!\(.*\)/,type:"macro"},{pattern:/for\s(\w+)\s(in|=)\s/,type:"keyword.control"},{pattern:/function\s\w+\(.*\)\s\{/,type:"not"},{pattern:/while\s+\(.+\)\n/,type:"not"},{pattern:/end\n?/,type:"keyword"},{pattern:/struct\s(.*)\s<:\s/,type:"keyword.other"},{pattern:/(::)?(Int|Uint)(8|16|32|64|128)/,type:"keyword.variable"},{pattern:/[0-9]+im/,type:"keyword"},{pattern:/\{:\?\}/,type:"not"},{pattern:/fn\smain()/,type:"not"},{pattern:/def\s+\w+\s*(\(.+\))?\s*\n/,type:"not"},{pattern:/puts\s+("|').+("|')/,type:"not"},{pattern:/class\s/,type:"not"},{pattern:/local\s(function|\w+)/,type:"not"},{pattern:/\bmodule\(.*\)/,type:"not"},{pattern:/fun main\((.*)?\) {/,type:"not"},{pattern:/fun(\s+)([A-Za-z0-9_])(\s+)?\((.*)\)(\s+){/,type:"not"}],JSON:[{pattern:/^\{$/,type:"meta.module",nearTop:!0},{pattern:/^\s*".+":\s*(".+"|[0-9]+|null|true|false)(,)?$/,type:"keyword"},{pattern:/^\s*".+":\s*(\{|\[)$/,type:"keyword"},{pattern:/^\s*".+":\s*\{(\s*".+":\s*(".+"|[0-9]+|null|true|false)(,)?\s*){1,}\}(,)?$/,type:"keyword"},{pattern:/\s*".+"\s*\[\s*((".+"|[0-9]+|null|true|false)(,)?\s*){1,}\](,)?$/,type:"keyword"}],Kotlin:[{pattern:/fun main\((.*)?\) {/,type:"keyword.function"},{pattern:/(inline|private|public|protected|override|operator(\s+))?fun(\s+)([A-Za-z0-9_])(\s+)?\((.*)\)(\s+)({|=)/,type:"keyword.function"},{pattern:/println\((.*)\)(\n|;)/,type:"keyword.print"},{pattern:/(else )?if\s*\(.+\)/,type:"keyword.control"},{pattern:/while\s+\(.+\)/,type:"keyword.control"},{pattern:/(const)?(\s+)?val(\s+)(.*)(:(\s)(.*)(\?)?)?(\s+)=(\s+)/,type:"keyword.variable"},{pattern:/^(\s+)?(inner|open|data)(\s+)class/,type:"keyword"},{pattern:/^import(\s+)(.*)$/,type:"meta.import",nearTop:!0},{pattern:/typealias(\s+)(.*)(\s+)=/,type:"keyword.control"},{pattern:/companion(\s+)object/,type:"keyword"},{pattern:/when(\s+)(\((.*)\)\s+)?{$/,type:"keyword.control"}],Lua:[{pattern:/(\[\[.*\]\])/,type:"constant.string"},{pattern:/local\s([a-zA-Z0-9_]+)(\s*=)?/,type:"keyword.variable"},{pattern:/(local\s)?function\s*([a-zA-Z0-9_]*)?\(\)/,type:"keyword.function"},{pattern:/for\s+([a-zA-Z]+)\s*=\s*([a-zA-Z0-9_]+),\s*([a-zA-Z0-9_]+)\s+do/,type:"keyword.control"},{pattern:/while\s(.*)\sdo/,type:"keyword.control"},{pattern:/\s+(and|break|do|else|elseif|end|false|function|if|in|not|or|local|repeat|return|then|true|until|pairs|ipairs|in|yield)/,type:"keyword.other"},{pattern:/nil/,type:"constant.null"},{pattern:/#([a-zA-Z_{}]+)/,type:"keyword.operator"},{pattern:/((get|set)metatable|raw(get|set|equal))\(.*\)/,type:"keyword.other"},{pattern:/__(index|newindex|call|sub|mul|div|mod|pow|unm|eq|le|lt)/,type:"keyword.other"},{pattern:/(\(.+\)|([a-zA-Z_]+)):([a-zA-Z_])\(.*\)/,type:"keyword.other"},{pattern:/{\s*[^\s;,]+([;,]\s*[^\s;,]+)*,?\s*}/,type:"constant.array"},{pattern:/{\s*([^\s;,=]+\s*=\s*[^\s;,=]+)(\s*[;,=]\s*[^\s;,=]+\s*=\s*[^\s;,=]+)*\s*,?\s*}/,type:"constant.dictionary"},{pattern:/math\.(.*)\([0-9]*\)/,type:"macro"},{pattern:/table\.(.*)\(.*\)/,type:"macro"},{pattern:/io\.(.*)\(.*\)/,type:"macro"},{pattern:/(require|dofile)\((.*)\)/,type:"meta.import"},{pattern:/(pcall|xpcall|unpack|pack|coroutine)/,type:"keyword.other"},{pattern:/--(\[\[)?.*/,type:"comment.line"},{pattern:/\.\.\./,type:"keyword.other"},{pattern:/\bmodule\s*\(.*\)/,type:"keyword.other"},{pattern:/(\/\/|\/\*)/,type:"not"},{pattern:/(#(include|define)|printf|\s+int\s+)/,type:"not"},{pattern:/\s+(let|const|var)\s+/,type:"not"},{pattern:/\s+(echo|die|\$(.*))\s+/,type:"not"},{pattern:/(def|len|from|import)/,type:"not"},{pattern:/(SELECT|FROM|INSERT|ALTER)/,type:"not"},{pattern:/(puts)/,type:"not"},{pattern:/\bmodule\s\S/,type:"not"},{pattern:/(([a-zA-Z0-9]+)::([a-zA-Z0-9]+)|using|(.*)!\(.*\)|(\|\|))/,type:"not"}],Markdown:[{pattern:/^(#){2,6}\s.+/,type:"keyword"},{pattern:/^(?!!)(?:=|-){2,}(?:>(?!$)|$)/,type:"meta.module"},{pattern:/(!)?\[.+\]\(.+\)/,type:"keyword"},{pattern:/\[.+\]\[.+\]/,type:"keyword"},{pattern:/^\[.+\]:\s?(<)?(http)?/,type:"keyword"},{pattern:/^(> .*)+/,type:"macro"},{pattern:/^```([A-Za-z0-9#_]+)?$/,type:"keyword"},{pattern:/^---$/,type:"meta.module",nearTop:!0}],Pascal:[{pattern:/^program (.*);$/,type:"meta.module",nearTop:!0},{pattern:/var$/i,type:"constant.type",nearTop:!0},{pattern:/const$/i,type:"constant.type",nearTop:!0},{pattern:/type$/i,type:"constant.type",nearTop:!0},{pattern:/(write|writeln)(\s+)?(\((.*)\))?;/i,type:"keyword.print"},{pattern:/^(\s*)?(function|procedure)(\s*)(.*)\((.*)\)(\s)?:(\s)?(.*);$/i,type:"keyword.function"},{pattern:/end(\.|;)/i,type:"keyword.control"},{pattern:/:(\s*)?(cardinal|shortint|smallint|word|extended|comp)(\s*);$/i,type:"constant.type"},{pattern:/if(\s+)(.*)(\s+)then/i,type:"keyword.control"},{pattern:/for(\s+)(.*):=(.*)(\s+)(downto|to)(\s+)(.*)(\s+)do/i,type:"keyword.control"},{pattern:/with(\s+)(.*)(\s+)do/i,type:"keyword.control"},{pattern:/repeat$/,type:"keyword"},{pattern:/begin$/,type:"keyword"},{pattern:/until(\s+)(.*);/i,type:"keyword.control"},{pattern:/\w+(\s*)?:=(\s*)?.+;$/i,type:"keyword.variable"}],PHP:[{pattern:/<\?php/,type:"meta.module"},{pattern:/\$\w+/,type:"keyword.variable"},{pattern:/use\s+\w+(\\\w+)+\s*;/,type:"meta.import",nearTop:!0},{pattern:/\$\w+->\w+/,type:"keyword"},{pattern:/(require|include)(_once)?\s*\(?\s*('|").+\.php('|")\s*\)?\s*;/,type:"meta.import"},{pattern:/echo\s+('|").+('|")\s*;/,type:"keyword.print"},{pattern:/NULL/,type:"constant.null"},{pattern:/new\s+((\\\w+)+|\w+)(\(.*\))?/,type:"keyword"},{pattern:/function(\s+[$\w]+\(.*\)|\s*\(.*\))/g,type:"keyword.control"},{pattern:/(else)?if\s+\(.+\)/,type:"keyword.control"},{pattern:/\w+::\w+/,type:"keyword"},{pattern:/===/g,type:"keyword.operator"},{pattern:/!==/g,type:"keyword.operator"},{pattern:/(^|\s)(var|char|long|int|float|double)\s+\w+\s*=?/,type:"not"},{pattern:/(var|const|let)\s+\w+\s*=?/,type:"not"},{pattern:/local\s(function|\w+)/,type:"not"}],Python:[{pattern:/def\s+\w+\(.*\)\s*:/,type:"keyword.function"},{pattern:/while (.+):/,type:"keyword.control"},{pattern:/from [\w.]+ import (\w+|\*)/,type:"meta.import"},{pattern:/class\s*\w+(\(\s*\w+\s*\))?\s*:/,type:"keyword"},{pattern:/if\s+(.+)\s*:/,type:"keyword.control"},{pattern:/elif\s+(.+)\s*:/,type:"keyword.control"},{pattern:/else:/,type:"keyword.control"},{pattern:/for (\w+|\(?\w+,\s*\w+\)?) in (.+):/,type:"keyword.control"},{pattern:/\w+\s*=\s*\w+(?!;)(\n|$)/,type:"keyword"},{pattern:/import ([[^.]\w])+/,type:"meta.import",nearTop:!0},{pattern:/print((\s*\(.+\))|\s+.+)/,type:"keyword.print"},{pattern:/(&{2}|\|{2})/,type:"not"},{pattern:/elseif/,type:"not"},{pattern:/local\s(function|\w+)?\s=\s/,type:"not"},{pattern:/fun main\((.*)?\) {/,type:"not"},{pattern:/(inline(\s+))?fun(\s+)([A-Za-z0-9_])(\s+)?\((.*)\)(\s+)({|=)/,type:"not"},{pattern:/(const)?(\s+)?val(\s+)(.*)(:(\s)(.*)(\?)?)?(\s+)=(\s+)/,type:"not"}],Ruby:[{pattern:/(require|include)\s+'\w+(\.rb)?'/,type:"meta.import",nearTop:!0},{pattern:/def\s+\w+\s*(\(.+\))?\s*\n/,type:"keyword.function"},{pattern:/@\w+/,type:"keyword.other"},{pattern:/\.\w+\?/,type:"constant.boolean"},{pattern:/puts\s+("|').+("|')/,type:"keyword.print"},{pattern:/class [A-Z]\w*\s*<\s*([A-Z]\w*(::)?)+/,type:"keyword"},{pattern:/attr_accessor\s+(:\w+(,\s*)?)+/,type:"keyword.function"},{pattern:/\w+\.new\s+/,type:"keyword"},{pattern:/elsif/,type:"keyword.control"},{pattern:/\bmodule\s\S/,type:"keyword.other"},{pattern:/\bBEGIN\s\{.*\}/,type:"keyword.other"},{pattern:/\bEND\s\{.*\}/,type:"keyword.other"},{pattern:/do\s*[|]\w+(,\s*\w+)*[|]/,type:"keyword.control"},{pattern:/for (\w+|\(?\w+,\s*\w+\)?) in (.+)/,type:"keyword.control"},{pattern:/nil/,type:"constant.null"},{pattern:/[A-Z]\w*::[A-Z]\w*/,type:"macro"}],Rust:[{pattern:/fn\smain()/,type:"keyword.function"},{pattern:/(pub\s)?fn\s[A-Za-z0-9<>,]+\(.*\)\s->\s\w+(\s\{|)/,type:"keyword.visibility"},{pattern:/let\smut\s\w+(\s=|)/,type:"keyword.variable"},{pattern:/(.*)!\(.*\)/,type:"macro"},{pattern:/use\s\w+::.*/,type:"meta.import"},{pattern:/\{:\?\}/,type:"keyword.other"},{pattern:/loop \{/,type:"keyword.control"},{pattern:/(impl|crate|extern|macro|box)/,type:"keyword.other"},{pattern:/match\s\w+\s\{/,type:"keyword.control"},{pattern:/\w+\.len\(\)/,type:"keyword.other"},{pattern:/(&str|(i|u)(8|16|32|64|128|size))/,type:"constant.type"},{pattern:/(Vec|Vec::new)|vec!/,type:"constant.type"},{pattern:/(Ok|Err|Box|ToOwned|Clone)/,type:"keyword.other"},{pattern:/panic!\(.*\)/,type:"keyword.function"},{pattern:/using\sSystem/,type:"not"},{pattern:/Console\.WriteLine\s*\(/,type:"not"},{pattern:/(public\s)?((partial|static)\s)?class\s/,type:"not"},{pattern:/(function|func)\s/,type:"not"}],SQL:[{pattern:/CREATE (TABLE|DATABASE)/,type:"keyword",nearTop:!0},{pattern:/DROP (TABLE|DATABASE)/,type:"keyword",nearTop:!0},{pattern:/SHOW DATABASES/,type:"keyword",nearTop:!0},{pattern:/INSERT INTO/,type:"keyword"},{pattern:/(SELECT|SELECT DISTINCT)\s/,type:"keyword"},{pattern:/INNER JOIN/,type:"keyword"},{pattern:/(GROUP|ORDER) BY/,type:"keyword"},{pattern:/(END;|COMMIT;)/,type:"keyword"},{pattern:/UPDATE\s+\w+\sSET/,type:"keyword"},{pattern:/VALUES+(\s+\(\w|\(\w)/,type:"keyword"},{pattern:/--\s\w/,type:"comment.line"},{pattern:/(VARCHAR|CHAR|BINARY|VARBINARY|BLOB|TEXT)\([0-9]+\)/,type:"constant.type"},{pattern:/(BIT|TINYINT|SMALLINT|MEDIUMINT|INT|INTEGER|BIGINT|DOUBLE)\([0-9]+\)/,type:"constant.type"},{pattern:/(TINYBLOB|TINYTEXT|MEDIUMTEXT|MEDIUMBLOB|LONGTEXT|LONGBLOB)/,type:"constant.type"},{pattern:/(BOOLEAN|BOOL|DATE|YEAR)/,type:"constant.type"},{pattern:/(EXP|SUM|SQRT|MIN|MAX)/,type:"keyword.operator"},{pattern:/local\s(function|\w+)?\s=\s/,type:"not"},{pattern:/(require|dofile)\((.*)\)/,type:"not"}],YAML:[{pattern:/^( )*([A-Za-z0-9_. ]+):( )?(.*)?$/,type:"keyword"},{pattern:/^( )*-( )([A-Za-z0-9_. ]+):( )?(.*)?$/,type:"keyword"},{pattern:/^( )*-( )(.*)$/,type:"keyword"},{pattern:/^( )*([A-Za-z0-9_. ]+):( )!!binary( )?(|)?$/,type:"constant.type"},{pattern:/^( )*([A-Za-z0-9_. ]+):( )\|$/,type:"keyword"},{pattern:/^( )*([A-Za-z0-9_. ]+):( )>$/,type:"keyword"},{pattern:/^( )*\?( )(.*)$/,type:"keyword"},{pattern:/^( )*\?( )\|$/,type:"constant.type"},{pattern:/^( )*<<:( )(\*)(.*)?$/,type:"constant.type"},{pattern:/^( )*([A-Za-z0-9_. ]+):(.*)?( )?{$/,type:"not"},{pattern:/^( )*([A-Za-z0-9_. ]+):(.*)?( )?,$/,type:"not"}]};return function(t,a={heuristic:!0,shiki:!1,noUnknown:!1}){let s=t.replace(/\r\n?/g,"\n").replace(/\n{2,}/g,"\n").split("\n");if(a.heuristic&&s.length>500&&(s=s.filter(((t,e)=>!!n(e,s)||e%Math.ceil(s.length/500)==0))),s[0].startsWith("#!")){if(s[0].startsWith("#!/usr/bin/env")){let t=s[0].split(" ").slice(1).join(" ");return t=p[t]||t.charAt(0).toUpperCase()+t.slice(1),{language:a.shiki?r(t):t,statistics:{},linesOfCode:s.length}}if(s[0].startsWith("#!/bin/bash"))return{language:a.shiki?"bash":"Bash",statistics:{},linesOfCode:s.length}}const y=Object.keys(o).map((t=>({language:t,checkers:o[t]}))),i=[];for(let t=0;t<y.length;t++){const{language:r,checkers:p}=y[t];let o=0;for(let t=0;t<s.length;t++)/^\s*$/.test(s[t])||(n(t,s)?o+=e(s[t],p):o+=e(s[t],p.filter((t=>!t.nearTop))));i.push({language:r,points:o})}a.noUnknown||i.push({language:"Unknown",points:1});const w=i.reduce(((t,e)=>t.points>=e.points?t:e),{points:0,language:""}),l={};for(let t=0;t<i.length;t++)l[i[t].language]=i[t].points;return{language:a.shiki?r(w.language):w.language,statistics:l,linesOfCode:s.length}}}();
